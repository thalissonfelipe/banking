// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth

import (
	"context"
	"github.com/thalissonfelipe/banking/banking/services"
	"sync"
)

// Ensure, that AuthMock does implement services.Auth.
// If this is not the case, regenerate this file with moq.
var _ services.Auth = &AuthMock{}

// AuthMock is a mock implementation of services.Auth.
//
// 	func TestSomethingThatUsesAuth(t *testing.T) {
//
// 		// make and configure a mocked services.Auth
// 		mockedAuth := &AuthMock{
// 			AutheticateFunc: func(ctx context.Context, cpfStr string, secretStr string) (string, error) {
// 				panic("mock out the Autheticate method")
// 			},
// 		}
//
// 		// use mockedAuth in code that requires services.Auth
// 		// and then make assertions.
//
// 	}
type AuthMock struct {
	// AutheticateFunc mocks the Autheticate method.
	AutheticateFunc func(ctx context.Context, cpfStr string, secretStr string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Autheticate holds details about calls to the Autheticate method.
		Autheticate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CpfStr is the cpfStr argument value.
			CpfStr string
			// SecretStr is the secretStr argument value.
			SecretStr string
		}
	}
	lockAutheticate sync.RWMutex
}

// Autheticate calls AutheticateFunc.
func (mock *AuthMock) Autheticate(ctx context.Context, cpfStr string, secretStr string) (string, error) {
	if mock.AutheticateFunc == nil {
		panic("AuthMock.AutheticateFunc: method is nil but Auth.Autheticate was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		CpfStr    string
		SecretStr string
	}{
		Ctx:       ctx,
		CpfStr:    cpfStr,
		SecretStr: secretStr,
	}
	mock.lockAutheticate.Lock()
	mock.calls.Autheticate = append(mock.calls.Autheticate, callInfo)
	mock.lockAutheticate.Unlock()
	return mock.AutheticateFunc(ctx, cpfStr, secretStr)
}

// AutheticateCalls gets all the calls that were made to Autheticate.
// Check the length with:
//     len(mockedAuth.AutheticateCalls())
func (mock *AuthMock) AutheticateCalls() []struct {
	Ctx       context.Context
	CpfStr    string
	SecretStr string
} {
	var calls []struct {
		Ctx       context.Context
		CpfStr    string
		SecretStr string
	}
	mock.lockAutheticate.RLock()
	calls = mock.calls.Autheticate
	mock.lockAutheticate.RUnlock()
	return calls
}
