// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth

import (
	"context"
	"github.com/thalissonfelipe/banking/banking/domain/usecases"
	"sync"
)

// Ensure, that UsecaseMock does implement usecases.Auth.
// If this is not the case, regenerate this file with moq.
var _ usecases.Auth = &UsecaseMock{}

// UsecaseMock is a mock implementation of usecases.Auth.
//
// 	func TestSomethingThatUsesAuth(t *testing.T) {
//
// 		// make and configure a mocked usecases.Auth
// 		mockedAuth := &UsecaseMock{
// 			AutheticateFunc: func(ctx context.Context, cpf string, secret string) (string, error) {
// 				panic("mock out the Autheticate method")
// 			},
// 		}
//
// 		// use mockedAuth in code that requires usecases.Auth
// 		// and then make assertions.
//
// 	}
type UsecaseMock struct {
	// AutheticateFunc mocks the Autheticate method.
	AutheticateFunc func(ctx context.Context, cpf string, secret string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Autheticate holds details about calls to the Autheticate method.
		Autheticate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cpf is the cpf argument value.
			Cpf string
			// Secret is the secret argument value.
			Secret string
		}
	}
	lockAutheticate sync.RWMutex
}

// Autheticate calls AutheticateFunc.
func (mock *UsecaseMock) Autheticate(ctx context.Context, cpf string, secret string) (string, error) {
	if mock.AutheticateFunc == nil {
		panic("UsecaseMock.AutheticateFunc: method is nil but Auth.Autheticate was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Cpf    string
		Secret string
	}{
		Ctx:    ctx,
		Cpf:    cpf,
		Secret: secret,
	}
	mock.lockAutheticate.Lock()
	mock.calls.Autheticate = append(mock.calls.Autheticate, callInfo)
	mock.lockAutheticate.Unlock()
	return mock.AutheticateFunc(ctx, cpf, secret)
}

// AutheticateCalls gets all the calls that were made to Autheticate.
// Check the length with:
//     len(mockedAuth.AutheticateCalls())
func (mock *UsecaseMock) AutheticateCalls() []struct {
	Ctx    context.Context
	Cpf    string
	Secret string
} {
	var calls []struct {
		Ctx    context.Context
		Cpf    string
		Secret string
	}
	mock.lockAutheticate.RLock()
	calls = mock.calls.Autheticate
	mock.lockAutheticate.RUnlock()
	return calls
}
