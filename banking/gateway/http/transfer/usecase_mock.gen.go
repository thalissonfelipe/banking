// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package transfer

import (
	"context"
	"github.com/thalissonfelipe/banking/banking/domain/entities"
	"github.com/thalissonfelipe/banking/banking/domain/transfer"
	"github.com/thalissonfelipe/banking/banking/domain/vos"
	"sync"
)

// UsecaseMock is a mock implementation of Usecase.
//
// 	func TestSomethingThatUsesUsecase(t *testing.T) {
//
// 		// make and configure a mocked Usecase
// 		mockedUsecase := &UsecaseMock{
// 			CreateTransferFunc: func(ctx context.Context, input transfer.CreateTransferInput) error {
// 				panic("mock out the CreateTransfer method")
// 			},
// 			ListTransfersFunc: func(ctx context.Context, accountID vos.AccountID) ([]entities.Transfer, error) {
// 				panic("mock out the ListTransfers method")
// 			},
// 		}
//
// 		// use mockedUsecase in code that requires Usecase
// 		// and then make assertions.
//
// 	}
type UsecaseMock struct {
	// CreateTransferFunc mocks the CreateTransfer method.
	CreateTransferFunc func(ctx context.Context, input transfer.CreateTransferInput) error

	// ListTransfersFunc mocks the ListTransfers method.
	ListTransfersFunc func(ctx context.Context, accountID vos.AccountID) ([]entities.Transfer, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateTransfer holds details about calls to the CreateTransfer method.
		CreateTransfer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input transfer.CreateTransferInput
		}
		// ListTransfers holds details about calls to the ListTransfers method.
		ListTransfers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID vos.AccountID
		}
	}
	lockCreateTransfer sync.RWMutex
	lockListTransfers  sync.RWMutex
}

// CreateTransfer calls CreateTransferFunc.
func (mock *UsecaseMock) CreateTransfer(ctx context.Context, input transfer.CreateTransferInput) error {
	if mock.CreateTransferFunc == nil {
		panic("UsecaseMock.CreateTransferFunc: method is nil but Usecase.CreateTransfer was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input transfer.CreateTransferInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockCreateTransfer.Lock()
	mock.calls.CreateTransfer = append(mock.calls.CreateTransfer, callInfo)
	mock.lockCreateTransfer.Unlock()
	return mock.CreateTransferFunc(ctx, input)
}

// CreateTransferCalls gets all the calls that were made to CreateTransfer.
// Check the length with:
//     len(mockedUsecase.CreateTransferCalls())
func (mock *UsecaseMock) CreateTransferCalls() []struct {
	Ctx   context.Context
	Input transfer.CreateTransferInput
} {
	var calls []struct {
		Ctx   context.Context
		Input transfer.CreateTransferInput
	}
	mock.lockCreateTransfer.RLock()
	calls = mock.calls.CreateTransfer
	mock.lockCreateTransfer.RUnlock()
	return calls
}

// ListTransfers calls ListTransfersFunc.
func (mock *UsecaseMock) ListTransfers(ctx context.Context, accountID vos.AccountID) ([]entities.Transfer, error) {
	if mock.ListTransfersFunc == nil {
		panic("UsecaseMock.ListTransfersFunc: method is nil but Usecase.ListTransfers was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID vos.AccountID
	}{
		Ctx:       ctx,
		AccountID: accountID,
	}
	mock.lockListTransfers.Lock()
	mock.calls.ListTransfers = append(mock.calls.ListTransfers, callInfo)
	mock.lockListTransfers.Unlock()
	return mock.ListTransfersFunc(ctx, accountID)
}

// ListTransfersCalls gets all the calls that were made to ListTransfers.
// Check the length with:
//     len(mockedUsecase.ListTransfersCalls())
func (mock *UsecaseMock) ListTransfersCalls() []struct {
	Ctx       context.Context
	AccountID vos.AccountID
} {
	var calls []struct {
		Ctx       context.Context
		AccountID vos.AccountID
	}
	mock.lockListTransfers.RLock()
	calls = mock.calls.ListTransfers
	mock.lockListTransfers.RUnlock()
	return calls
}
