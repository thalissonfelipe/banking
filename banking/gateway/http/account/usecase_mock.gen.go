// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package account

import (
	"context"
	"github.com/thalissonfelipe/banking/banking/domain/entity"
	"github.com/thalissonfelipe/banking/banking/domain/vos"
	"sync"
)

// UsecaseMock is a mock implementation of usecases.Account.
//
// 	func TestSomethingThatUsesAccount(t *testing.T) {
//
// 		// make and configure a mocked usecases.Account
// 		mockedAccount := &UsecaseMock{
// 			CreateAccountFunc: func(contextMoqParam context.Context, account *entity.Account) error {
// 				panic("mock out the CreateAccount method")
// 			},
// 			GetAccountBalanceByIDFunc: func(contextMoqParam context.Context, accountID vos.AccountID) (int, error) {
// 				panic("mock out the GetAccountBalanceByID method")
// 			},
// 			GetAccountByCPFFunc: func(contextMoqParam context.Context, cPF vos.CPF) (entity.Account, error) {
// 				panic("mock out the GetAccountByCPF method")
// 			},
// 			GetAccountByIDFunc: func(contextMoqParam context.Context, accountID vos.AccountID) (entity.Account, error) {
// 				panic("mock out the GetAccountByID method")
// 			},
// 			ListAccountsFunc: func(contextMoqParam context.Context) ([]entity.Account, error) {
// 				panic("mock out the ListAccounts method")
// 			},
// 		}
//
// 		// use mockedAccount in code that requires usecases.Account
// 		// and then make assertions.
//
// 	}
type UsecaseMock struct {
	// CreateAccountFunc mocks the CreateAccount method.
	CreateAccountFunc func(contextMoqParam context.Context, account *entity.Account) error

	// GetAccountBalanceByIDFunc mocks the GetAccountBalanceByID method.
	GetAccountBalanceByIDFunc func(contextMoqParam context.Context, accountID vos.AccountID) (int, error)

	// GetAccountByCPFFunc mocks the GetAccountByCPF method.
	GetAccountByCPFFunc func(contextMoqParam context.Context, cPF vos.CPF) (entity.Account, error)

	// GetAccountByIDFunc mocks the GetAccountByID method.
	GetAccountByIDFunc func(contextMoqParam context.Context, accountID vos.AccountID) (entity.Account, error)

	// ListAccountsFunc mocks the ListAccounts method.
	ListAccountsFunc func(contextMoqParam context.Context) ([]entity.Account, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAccount holds details about calls to the CreateAccount method.
		CreateAccount []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Account is the account argument value.
			Account *entity.Account
		}
		// GetAccountBalanceByID holds details about calls to the GetAccountBalanceByID method.
		GetAccountBalanceByID []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AccountID is the accountID argument value.
			AccountID vos.AccountID
		}
		// GetAccountByCPF holds details about calls to the GetAccountByCPF method.
		GetAccountByCPF []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CPF is the cPF argument value.
			CPF vos.CPF
		}
		// GetAccountByID holds details about calls to the GetAccountByID method.
		GetAccountByID []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AccountID is the accountID argument value.
			AccountID vos.AccountID
		}
		// ListAccounts holds details about calls to the ListAccounts method.
		ListAccounts []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
	}
	lockCreateAccount         sync.RWMutex
	lockGetAccountBalanceByID sync.RWMutex
	lockGetAccountByCPF       sync.RWMutex
	lockGetAccountByID        sync.RWMutex
	lockListAccounts          sync.RWMutex
}

// CreateAccount calls CreateAccountFunc.
func (mock *UsecaseMock) CreateAccount(contextMoqParam context.Context, account *entity.Account) error {
	if mock.CreateAccountFunc == nil {
		panic("UsecaseMock.CreateAccountFunc: method is nil but Account.CreateAccount was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Account         *entity.Account
	}{
		ContextMoqParam: contextMoqParam,
		Account:         account,
	}
	mock.lockCreateAccount.Lock()
	mock.calls.CreateAccount = append(mock.calls.CreateAccount, callInfo)
	mock.lockCreateAccount.Unlock()
	return mock.CreateAccountFunc(contextMoqParam, account)
}

// CreateAccountCalls gets all the calls that were made to CreateAccount.
// Check the length with:
//     len(mockedAccount.CreateAccountCalls())
func (mock *UsecaseMock) CreateAccountCalls() []struct {
	ContextMoqParam context.Context
	Account         *entity.Account
} {
	var calls []struct {
		ContextMoqParam context.Context
		Account         *entity.Account
	}
	mock.lockCreateAccount.RLock()
	calls = mock.calls.CreateAccount
	mock.lockCreateAccount.RUnlock()
	return calls
}

// GetAccountBalanceByID calls GetAccountBalanceByIDFunc.
func (mock *UsecaseMock) GetAccountBalanceByID(contextMoqParam context.Context, accountID vos.AccountID) (int, error) {
	if mock.GetAccountBalanceByIDFunc == nil {
		panic("UsecaseMock.GetAccountBalanceByIDFunc: method is nil but Account.GetAccountBalanceByID was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		AccountID       vos.AccountID
	}{
		ContextMoqParam: contextMoqParam,
		AccountID:       accountID,
	}
	mock.lockGetAccountBalanceByID.Lock()
	mock.calls.GetAccountBalanceByID = append(mock.calls.GetAccountBalanceByID, callInfo)
	mock.lockGetAccountBalanceByID.Unlock()
	return mock.GetAccountBalanceByIDFunc(contextMoqParam, accountID)
}

// GetAccountBalanceByIDCalls gets all the calls that were made to GetAccountBalanceByID.
// Check the length with:
//     len(mockedAccount.GetAccountBalanceByIDCalls())
func (mock *UsecaseMock) GetAccountBalanceByIDCalls() []struct {
	ContextMoqParam context.Context
	AccountID       vos.AccountID
} {
	var calls []struct {
		ContextMoqParam context.Context
		AccountID       vos.AccountID
	}
	mock.lockGetAccountBalanceByID.RLock()
	calls = mock.calls.GetAccountBalanceByID
	mock.lockGetAccountBalanceByID.RUnlock()
	return calls
}

// GetAccountByCPF calls GetAccountByCPFFunc.
func (mock *UsecaseMock) GetAccountByCPF(contextMoqParam context.Context, cPF vos.CPF) (entity.Account, error) {
	if mock.GetAccountByCPFFunc == nil {
		panic("UsecaseMock.GetAccountByCPFFunc: method is nil but Account.GetAccountByCPF was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CPF             vos.CPF
	}{
		ContextMoqParam: contextMoqParam,
		CPF:             cPF,
	}
	mock.lockGetAccountByCPF.Lock()
	mock.calls.GetAccountByCPF = append(mock.calls.GetAccountByCPF, callInfo)
	mock.lockGetAccountByCPF.Unlock()
	return mock.GetAccountByCPFFunc(contextMoqParam, cPF)
}

// GetAccountByCPFCalls gets all the calls that were made to GetAccountByCPF.
// Check the length with:
//     len(mockedAccount.GetAccountByCPFCalls())
func (mock *UsecaseMock) GetAccountByCPFCalls() []struct {
	ContextMoqParam context.Context
	CPF             vos.CPF
} {
	var calls []struct {
		ContextMoqParam context.Context
		CPF             vos.CPF
	}
	mock.lockGetAccountByCPF.RLock()
	calls = mock.calls.GetAccountByCPF
	mock.lockGetAccountByCPF.RUnlock()
	return calls
}

// GetAccountByID calls GetAccountByIDFunc.
func (mock *UsecaseMock) GetAccountByID(contextMoqParam context.Context, accountID vos.AccountID) (entity.Account, error) {
	if mock.GetAccountByIDFunc == nil {
		panic("UsecaseMock.GetAccountByIDFunc: method is nil but Account.GetAccountByID was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		AccountID       vos.AccountID
	}{
		ContextMoqParam: contextMoqParam,
		AccountID:       accountID,
	}
	mock.lockGetAccountByID.Lock()
	mock.calls.GetAccountByID = append(mock.calls.GetAccountByID, callInfo)
	mock.lockGetAccountByID.Unlock()
	return mock.GetAccountByIDFunc(contextMoqParam, accountID)
}

// GetAccountByIDCalls gets all the calls that were made to GetAccountByID.
// Check the length with:
//     len(mockedAccount.GetAccountByIDCalls())
func (mock *UsecaseMock) GetAccountByIDCalls() []struct {
	ContextMoqParam context.Context
	AccountID       vos.AccountID
} {
	var calls []struct {
		ContextMoqParam context.Context
		AccountID       vos.AccountID
	}
	mock.lockGetAccountByID.RLock()
	calls = mock.calls.GetAccountByID
	mock.lockGetAccountByID.RUnlock()
	return calls
}

// ListAccounts calls ListAccountsFunc.
func (mock *UsecaseMock) ListAccounts(contextMoqParam context.Context) ([]entity.Account, error) {
	if mock.ListAccountsFunc == nil {
		panic("UsecaseMock.ListAccountsFunc: method is nil but Account.ListAccounts was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockListAccounts.Lock()
	mock.calls.ListAccounts = append(mock.calls.ListAccounts, callInfo)
	mock.lockListAccounts.Unlock()
	return mock.ListAccountsFunc(contextMoqParam)
}

// ListAccountsCalls gets all the calls that were made to ListAccounts.
// Check the length with:
//     len(mockedAccount.ListAccountsCalls())
func (mock *UsecaseMock) ListAccountsCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockListAccounts.RLock()
	calls = mock.calls.ListAccounts
	mock.lockListAccounts.RUnlock()
	return calls
}
