// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package usecase

import (
	"context"
	"github.com/thalissonfelipe/banking/banking/domain/account"
	"github.com/thalissonfelipe/banking/banking/domain/entities"
	"github.com/thalissonfelipe/banking/banking/domain/vos"
	"sync"
)

// Ensure, that RepositoryMock does implement account.Repository.
// If this is not the case, regenerate this file with moq.
var _ account.Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of account.Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked account.Repository
// 		mockedRepository := &RepositoryMock{
// 			CreateAccountFunc: func(ctx context.Context, account *entities.Account) error {
// 				panic("mock out the CreateAccount method")
// 			},
// 			GetAccountByCPFFunc: func(ctx context.Context, cpf vos.CPF) (entities.Account, error) {
// 				panic("mock out the GetAccountByCPF method")
// 			},
// 			GetAccountByIDFunc: func(ctx context.Context, id vos.AccountID) (entities.Account, error) {
// 				panic("mock out the GetAccountByID method")
// 			},
// 			GetAccountsFunc: func(ctx context.Context) ([]entities.Account, error) {
// 				panic("mock out the GetAccounts method")
// 			},
// 			GetBalanceByIDFunc: func(ctx context.Context, id vos.AccountID) (int, error) {
// 				panic("mock out the GetBalanceByID method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires account.Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// CreateAccountFunc mocks the CreateAccount method.
	CreateAccountFunc func(ctx context.Context, account *entities.Account) error

	// GetAccountByCPFFunc mocks the GetAccountByCPF method.
	GetAccountByCPFFunc func(ctx context.Context, cpf vos.CPF) (entities.Account, error)

	// GetAccountByIDFunc mocks the GetAccountByID method.
	GetAccountByIDFunc func(ctx context.Context, id vos.AccountID) (entities.Account, error)

	// GetAccountsFunc mocks the GetAccounts method.
	GetAccountsFunc func(ctx context.Context) ([]entities.Account, error)

	// GetBalanceByIDFunc mocks the GetBalanceByID method.
	GetBalanceByIDFunc func(ctx context.Context, id vos.AccountID) (int, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAccount holds details about calls to the CreateAccount method.
		CreateAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account *entities.Account
		}
		// GetAccountByCPF holds details about calls to the GetAccountByCPF method.
		GetAccountByCPF []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cpf is the cpf argument value.
			Cpf vos.CPF
		}
		// GetAccountByID holds details about calls to the GetAccountByID method.
		GetAccountByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID vos.AccountID
		}
		// GetAccounts holds details about calls to the GetAccounts method.
		GetAccounts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetBalanceByID holds details about calls to the GetBalanceByID method.
		GetBalanceByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID vos.AccountID
		}
	}
	lockCreateAccount   sync.RWMutex
	lockGetAccountByCPF sync.RWMutex
	lockGetAccountByID  sync.RWMutex
	lockGetAccounts     sync.RWMutex
	lockGetBalanceByID  sync.RWMutex
}

// CreateAccount calls CreateAccountFunc.
func (mock *RepositoryMock) CreateAccount(ctx context.Context, account *entities.Account) error {
	if mock.CreateAccountFunc == nil {
		panic("RepositoryMock.CreateAccountFunc: method is nil but Repository.CreateAccount was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Account *entities.Account
	}{
		Ctx:     ctx,
		Account: account,
	}
	mock.lockCreateAccount.Lock()
	mock.calls.CreateAccount = append(mock.calls.CreateAccount, callInfo)
	mock.lockCreateAccount.Unlock()
	return mock.CreateAccountFunc(ctx, account)
}

// CreateAccountCalls gets all the calls that were made to CreateAccount.
// Check the length with:
//     len(mockedRepository.CreateAccountCalls())
func (mock *RepositoryMock) CreateAccountCalls() []struct {
	Ctx     context.Context
	Account *entities.Account
} {
	var calls []struct {
		Ctx     context.Context
		Account *entities.Account
	}
	mock.lockCreateAccount.RLock()
	calls = mock.calls.CreateAccount
	mock.lockCreateAccount.RUnlock()
	return calls
}

// GetAccountByCPF calls GetAccountByCPFFunc.
func (mock *RepositoryMock) GetAccountByCPF(ctx context.Context, cpf vos.CPF) (entities.Account, error) {
	if mock.GetAccountByCPFFunc == nil {
		panic("RepositoryMock.GetAccountByCPFFunc: method is nil but Repository.GetAccountByCPF was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cpf vos.CPF
	}{
		Ctx: ctx,
		Cpf: cpf,
	}
	mock.lockGetAccountByCPF.Lock()
	mock.calls.GetAccountByCPF = append(mock.calls.GetAccountByCPF, callInfo)
	mock.lockGetAccountByCPF.Unlock()
	return mock.GetAccountByCPFFunc(ctx, cpf)
}

// GetAccountByCPFCalls gets all the calls that were made to GetAccountByCPF.
// Check the length with:
//     len(mockedRepository.GetAccountByCPFCalls())
func (mock *RepositoryMock) GetAccountByCPFCalls() []struct {
	Ctx context.Context
	Cpf vos.CPF
} {
	var calls []struct {
		Ctx context.Context
		Cpf vos.CPF
	}
	mock.lockGetAccountByCPF.RLock()
	calls = mock.calls.GetAccountByCPF
	mock.lockGetAccountByCPF.RUnlock()
	return calls
}

// GetAccountByID calls GetAccountByIDFunc.
func (mock *RepositoryMock) GetAccountByID(ctx context.Context, id vos.AccountID) (entities.Account, error) {
	if mock.GetAccountByIDFunc == nil {
		panic("RepositoryMock.GetAccountByIDFunc: method is nil but Repository.GetAccountByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  vos.AccountID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetAccountByID.Lock()
	mock.calls.GetAccountByID = append(mock.calls.GetAccountByID, callInfo)
	mock.lockGetAccountByID.Unlock()
	return mock.GetAccountByIDFunc(ctx, id)
}

// GetAccountByIDCalls gets all the calls that were made to GetAccountByID.
// Check the length with:
//     len(mockedRepository.GetAccountByIDCalls())
func (mock *RepositoryMock) GetAccountByIDCalls() []struct {
	Ctx context.Context
	ID  vos.AccountID
} {
	var calls []struct {
		Ctx context.Context
		ID  vos.AccountID
	}
	mock.lockGetAccountByID.RLock()
	calls = mock.calls.GetAccountByID
	mock.lockGetAccountByID.RUnlock()
	return calls
}

// GetAccounts calls GetAccountsFunc.
func (mock *RepositoryMock) GetAccounts(ctx context.Context) ([]entities.Account, error) {
	if mock.GetAccountsFunc == nil {
		panic("RepositoryMock.GetAccountsFunc: method is nil but Repository.GetAccounts was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAccounts.Lock()
	mock.calls.GetAccounts = append(mock.calls.GetAccounts, callInfo)
	mock.lockGetAccounts.Unlock()
	return mock.GetAccountsFunc(ctx)
}

// GetAccountsCalls gets all the calls that were made to GetAccounts.
// Check the length with:
//     len(mockedRepository.GetAccountsCalls())
func (mock *RepositoryMock) GetAccountsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAccounts.RLock()
	calls = mock.calls.GetAccounts
	mock.lockGetAccounts.RUnlock()
	return calls
}

// GetBalanceByID calls GetBalanceByIDFunc.
func (mock *RepositoryMock) GetBalanceByID(ctx context.Context, id vos.AccountID) (int, error) {
	if mock.GetBalanceByIDFunc == nil {
		panic("RepositoryMock.GetBalanceByIDFunc: method is nil but Repository.GetBalanceByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  vos.AccountID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetBalanceByID.Lock()
	mock.calls.GetBalanceByID = append(mock.calls.GetBalanceByID, callInfo)
	mock.lockGetBalanceByID.Unlock()
	return mock.GetBalanceByIDFunc(ctx, id)
}

// GetBalanceByIDCalls gets all the calls that were made to GetBalanceByID.
// Check the length with:
//     len(mockedRepository.GetBalanceByIDCalls())
func (mock *RepositoryMock) GetBalanceByIDCalls() []struct {
	Ctx context.Context
	ID  vos.AccountID
} {
	var calls []struct {
		Ctx context.Context
		ID  vos.AccountID
	}
	mock.lockGetBalanceByID.RLock()
	calls = mock.calls.GetBalanceByID
	mock.lockGetBalanceByID.RUnlock()
	return calls
}
