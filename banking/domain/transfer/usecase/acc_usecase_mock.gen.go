// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package usecase

import (
	"context"
	"github.com/thalissonfelipe/banking/banking/domain/account"
	"github.com/thalissonfelipe/banking/banking/domain/entities"
	"github.com/thalissonfelipe/banking/banking/domain/vos"
	"sync"
)

// Ensure, that UsecaseMock does implement account.Usecase.
// If this is not the case, regenerate this file with moq.
var _ account.Usecase = &UsecaseMock{}

// UsecaseMock is a mock implementation of account.Usecase.
//
// 	func TestSomethingThatUsesUsecase(t *testing.T) {
//
// 		// make and configure a mocked account.Usecase
// 		mockedUsecase := &UsecaseMock{
// 			CreateAccountFunc: func(ctx context.Context, account *entities.Account) error {
// 				panic("mock out the CreateAccount method")
// 			},
// 			GetAccountBalanceByIDFunc: func(ctx context.Context, accountID vos.AccountID) (int, error) {
// 				panic("mock out the GetAccountBalanceByID method")
// 			},
// 			GetAccountByCPFFunc: func(ctx context.Context, cpf vos.CPF) (entities.Account, error) {
// 				panic("mock out the GetAccountByCPF method")
// 			},
// 			GetAccountByIDFunc: func(ctx context.Context, accountID vos.AccountID) (entities.Account, error) {
// 				panic("mock out the GetAccountByID method")
// 			},
// 			ListAccountsFunc: func(ctx context.Context) ([]entities.Account, error) {
// 				panic("mock out the ListAccounts method")
// 			},
// 		}
//
// 		// use mockedUsecase in code that requires account.Usecase
// 		// and then make assertions.
//
// 	}
type UsecaseMock struct {
	// CreateAccountFunc mocks the CreateAccount method.
	CreateAccountFunc func(ctx context.Context, account *entities.Account) error

	// GetAccountBalanceByIDFunc mocks the GetAccountBalanceByID method.
	GetAccountBalanceByIDFunc func(ctx context.Context, accountID vos.AccountID) (int, error)

	// GetAccountByCPFFunc mocks the GetAccountByCPF method.
	GetAccountByCPFFunc func(ctx context.Context, cpf vos.CPF) (entities.Account, error)

	// GetAccountByIDFunc mocks the GetAccountByID method.
	GetAccountByIDFunc func(ctx context.Context, accountID vos.AccountID) (entities.Account, error)

	// ListAccountsFunc mocks the ListAccounts method.
	ListAccountsFunc func(ctx context.Context) ([]entities.Account, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAccount holds details about calls to the CreateAccount method.
		CreateAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account *entities.Account
		}
		// GetAccountBalanceByID holds details about calls to the GetAccountBalanceByID method.
		GetAccountBalanceByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID vos.AccountID
		}
		// GetAccountByCPF holds details about calls to the GetAccountByCPF method.
		GetAccountByCPF []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cpf is the cpf argument value.
			Cpf vos.CPF
		}
		// GetAccountByID holds details about calls to the GetAccountByID method.
		GetAccountByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID vos.AccountID
		}
		// ListAccounts holds details about calls to the ListAccounts method.
		ListAccounts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockCreateAccount         sync.RWMutex
	lockGetAccountBalanceByID sync.RWMutex
	lockGetAccountByCPF       sync.RWMutex
	lockGetAccountByID        sync.RWMutex
	lockListAccounts          sync.RWMutex
}

// CreateAccount calls CreateAccountFunc.
func (mock *UsecaseMock) CreateAccount(ctx context.Context, account *entities.Account) error {
	if mock.CreateAccountFunc == nil {
		panic("UsecaseMock.CreateAccountFunc: method is nil but Usecase.CreateAccount was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Account *entities.Account
	}{
		Ctx:     ctx,
		Account: account,
	}
	mock.lockCreateAccount.Lock()
	mock.calls.CreateAccount = append(mock.calls.CreateAccount, callInfo)
	mock.lockCreateAccount.Unlock()
	return mock.CreateAccountFunc(ctx, account)
}

// CreateAccountCalls gets all the calls that were made to CreateAccount.
// Check the length with:
//     len(mockedUsecase.CreateAccountCalls())
func (mock *UsecaseMock) CreateAccountCalls() []struct {
	Ctx     context.Context
	Account *entities.Account
} {
	var calls []struct {
		Ctx     context.Context
		Account *entities.Account
	}
	mock.lockCreateAccount.RLock()
	calls = mock.calls.CreateAccount
	mock.lockCreateAccount.RUnlock()
	return calls
}

// GetAccountBalanceByID calls GetAccountBalanceByIDFunc.
func (mock *UsecaseMock) GetAccountBalanceByID(ctx context.Context, accountID vos.AccountID) (int, error) {
	if mock.GetAccountBalanceByIDFunc == nil {
		panic("UsecaseMock.GetAccountBalanceByIDFunc: method is nil but Usecase.GetAccountBalanceByID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID vos.AccountID
	}{
		Ctx:       ctx,
		AccountID: accountID,
	}
	mock.lockGetAccountBalanceByID.Lock()
	mock.calls.GetAccountBalanceByID = append(mock.calls.GetAccountBalanceByID, callInfo)
	mock.lockGetAccountBalanceByID.Unlock()
	return mock.GetAccountBalanceByIDFunc(ctx, accountID)
}

// GetAccountBalanceByIDCalls gets all the calls that were made to GetAccountBalanceByID.
// Check the length with:
//     len(mockedUsecase.GetAccountBalanceByIDCalls())
func (mock *UsecaseMock) GetAccountBalanceByIDCalls() []struct {
	Ctx       context.Context
	AccountID vos.AccountID
} {
	var calls []struct {
		Ctx       context.Context
		AccountID vos.AccountID
	}
	mock.lockGetAccountBalanceByID.RLock()
	calls = mock.calls.GetAccountBalanceByID
	mock.lockGetAccountBalanceByID.RUnlock()
	return calls
}

// GetAccountByCPF calls GetAccountByCPFFunc.
func (mock *UsecaseMock) GetAccountByCPF(ctx context.Context, cpf vos.CPF) (entities.Account, error) {
	if mock.GetAccountByCPFFunc == nil {
		panic("UsecaseMock.GetAccountByCPFFunc: method is nil but Usecase.GetAccountByCPF was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cpf vos.CPF
	}{
		Ctx: ctx,
		Cpf: cpf,
	}
	mock.lockGetAccountByCPF.Lock()
	mock.calls.GetAccountByCPF = append(mock.calls.GetAccountByCPF, callInfo)
	mock.lockGetAccountByCPF.Unlock()
	return mock.GetAccountByCPFFunc(ctx, cpf)
}

// GetAccountByCPFCalls gets all the calls that were made to GetAccountByCPF.
// Check the length with:
//     len(mockedUsecase.GetAccountByCPFCalls())
func (mock *UsecaseMock) GetAccountByCPFCalls() []struct {
	Ctx context.Context
	Cpf vos.CPF
} {
	var calls []struct {
		Ctx context.Context
		Cpf vos.CPF
	}
	mock.lockGetAccountByCPF.RLock()
	calls = mock.calls.GetAccountByCPF
	mock.lockGetAccountByCPF.RUnlock()
	return calls
}

// GetAccountByID calls GetAccountByIDFunc.
func (mock *UsecaseMock) GetAccountByID(ctx context.Context, accountID vos.AccountID) (entities.Account, error) {
	if mock.GetAccountByIDFunc == nil {
		panic("UsecaseMock.GetAccountByIDFunc: method is nil but Usecase.GetAccountByID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID vos.AccountID
	}{
		Ctx:       ctx,
		AccountID: accountID,
	}
	mock.lockGetAccountByID.Lock()
	mock.calls.GetAccountByID = append(mock.calls.GetAccountByID, callInfo)
	mock.lockGetAccountByID.Unlock()
	return mock.GetAccountByIDFunc(ctx, accountID)
}

// GetAccountByIDCalls gets all the calls that were made to GetAccountByID.
// Check the length with:
//     len(mockedUsecase.GetAccountByIDCalls())
func (mock *UsecaseMock) GetAccountByIDCalls() []struct {
	Ctx       context.Context
	AccountID vos.AccountID
} {
	var calls []struct {
		Ctx       context.Context
		AccountID vos.AccountID
	}
	mock.lockGetAccountByID.RLock()
	calls = mock.calls.GetAccountByID
	mock.lockGetAccountByID.RUnlock()
	return calls
}

// ListAccounts calls ListAccountsFunc.
func (mock *UsecaseMock) ListAccounts(ctx context.Context) ([]entities.Account, error) {
	if mock.ListAccountsFunc == nil {
		panic("UsecaseMock.ListAccountsFunc: method is nil but Usecase.ListAccounts was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListAccounts.Lock()
	mock.calls.ListAccounts = append(mock.calls.ListAccounts, callInfo)
	mock.lockListAccounts.Unlock()
	return mock.ListAccountsFunc(ctx)
}

// ListAccountsCalls gets all the calls that were made to ListAccounts.
// Check the length with:
//     len(mockedUsecase.ListAccountsCalls())
func (mock *UsecaseMock) ListAccountsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListAccounts.RLock()
	calls = mock.calls.ListAccounts
	mock.lockListAccounts.RUnlock()
	return calls
}
