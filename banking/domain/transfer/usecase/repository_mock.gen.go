// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package usecase

import (
	"context"
	"github.com/thalissonfelipe/banking/banking/domain/entities"
	"github.com/thalissonfelipe/banking/banking/domain/transfer"
	"github.com/thalissonfelipe/banking/banking/domain/vos"
	"sync"
)

// Ensure, that RepositoryMock does implement transfer.Repository.
// If this is not the case, regenerate this file with moq.
var _ transfer.Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of transfer.Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked transfer.Repository
// 		mockedRepository := &RepositoryMock{
// 			CreateTransferFunc: func(ctx context.Context, transfer *entities.Transfer) error {
// 				panic("mock out the CreateTransfer method")
// 			},
// 			GetTransfersFunc: func(ctx context.Context, id vos.AccountID) ([]entities.Transfer, error) {
// 				panic("mock out the GetTransfers method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires transfer.Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// CreateTransferFunc mocks the CreateTransfer method.
	CreateTransferFunc func(ctx context.Context, transfer *entities.Transfer) error

	// GetTransfersFunc mocks the GetTransfers method.
	GetTransfersFunc func(ctx context.Context, id vos.AccountID) ([]entities.Transfer, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateTransfer holds details about calls to the CreateTransfer method.
		CreateTransfer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Transfer is the transfer argument value.
			Transfer *entities.Transfer
		}
		// GetTransfers holds details about calls to the GetTransfers method.
		GetTransfers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID vos.AccountID
		}
	}
	lockCreateTransfer sync.RWMutex
	lockGetTransfers   sync.RWMutex
}

// CreateTransfer calls CreateTransferFunc.
func (mock *RepositoryMock) CreateTransfer(ctx context.Context, transfer *entities.Transfer) error {
	if mock.CreateTransferFunc == nil {
		panic("RepositoryMock.CreateTransferFunc: method is nil but Repository.CreateTransfer was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Transfer *entities.Transfer
	}{
		Ctx:      ctx,
		Transfer: transfer,
	}
	mock.lockCreateTransfer.Lock()
	mock.calls.CreateTransfer = append(mock.calls.CreateTransfer, callInfo)
	mock.lockCreateTransfer.Unlock()
	return mock.CreateTransferFunc(ctx, transfer)
}

// CreateTransferCalls gets all the calls that were made to CreateTransfer.
// Check the length with:
//     len(mockedRepository.CreateTransferCalls())
func (mock *RepositoryMock) CreateTransferCalls() []struct {
	Ctx      context.Context
	Transfer *entities.Transfer
} {
	var calls []struct {
		Ctx      context.Context
		Transfer *entities.Transfer
	}
	mock.lockCreateTransfer.RLock()
	calls = mock.calls.CreateTransfer
	mock.lockCreateTransfer.RUnlock()
	return calls
}

// GetTransfers calls GetTransfersFunc.
func (mock *RepositoryMock) GetTransfers(ctx context.Context, id vos.AccountID) ([]entities.Transfer, error) {
	if mock.GetTransfersFunc == nil {
		panic("RepositoryMock.GetTransfersFunc: method is nil but Repository.GetTransfers was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  vos.AccountID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetTransfers.Lock()
	mock.calls.GetTransfers = append(mock.calls.GetTransfers, callInfo)
	mock.lockGetTransfers.Unlock()
	return mock.GetTransfersFunc(ctx, id)
}

// GetTransfersCalls gets all the calls that were made to GetTransfers.
// Check the length with:
//     len(mockedRepository.GetTransfersCalls())
func (mock *RepositoryMock) GetTransfersCalls() []struct {
	Ctx context.Context
	ID  vos.AccountID
} {
	var calls []struct {
		Ctx context.Context
		ID  vos.AccountID
	}
	mock.lockGetTransfers.RLock()
	calls = mock.calls.GetTransfers
	mock.lockGetTransfers.RUnlock()
	return calls
}
