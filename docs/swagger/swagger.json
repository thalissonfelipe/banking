{
    "swagger": "2.0",
    "info": {
        "description": "This is a simple banking api.",
        "title": "Swagger Banking API",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "basePath": "/api/v1",
    "paths": {
        "/accounts": {
            "get": {
                "description": "Lists all accounts.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Lists all accounts.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schema.ListAccountsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.InternalServerError"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new account given a name, cpf and secret.\nSecret must be a minimum of 8, a maximum of 20, at least one lowercase character,\none uppercase character and one number.\nCPF must have the format XXX.XXX.XXX-XX or XXXXXXXXXXX.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Creates a new account.",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schema.CreateAccountInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/schema.CreateAccountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/rest.ConflictError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.InternalServerError"
                        }
                    }
                }
            }
        },
        "/accounts/{accountID}/balance": {
            "get": {
                "description": "Gets account balance by account ID, if exists.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Gets account balance.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID",
                        "name": "accountID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schema.BalanceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.InternalServerError"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Returns a JWT to be used on /transfers endpoints.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sign In"
                ],
                "summary": "Logs in the server.",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schema.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schema.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.InvalidCredentialsError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.InternalServerError"
                        }
                    }
                }
            }
        },
        "/transfers": {
            "get": {
                "description": "Lists all transfers. User must be authenticated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfers"
                ],
                "summary": "Lists all transfers.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Authorization Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schema.ListTransfersResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.UnauthorizedError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.InternalServerError"
                        }
                    }
                }
            },
            "post": {
                "description": "Performs a transfer between two accounts. User must be authenticated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfers"
                ],
                "summary": "Performs a transfer between two accounts.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Authorization Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Body",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schema.PerformTransferInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/schema.PerformTransferResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.UnauthorizedError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/rest.NotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest.InternalServerError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "rest.ConflictError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "account already exists"
                }
            }
        },
        "rest.Error": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rest.ErrorDetail"
                    }
                },
                "error": {
                    "type": "string",
                    "example": "invalid request body"
                }
            }
        },
        "rest.ErrorDetail": {
            "type": "object",
            "properties": {
                "location": {
                    "type": "string",
                    "example": "body.name"
                },
                "message": {
                    "type": "string",
                    "example": "missing parameter"
                }
            }
        },
        "rest.InternalServerError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "internal server error"
                }
            }
        },
        "rest.InvalidCredentialsError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "invalid credentials"
                }
            }
        },
        "rest.NotFoundError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "account not found"
                }
            }
        },
        "rest.UnauthorizedError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "unauthorized"
                }
            }
        },
        "schema.Account": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "integer"
                },
                "cpf": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "schema.BalanceResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "integer"
                }
            }
        },
        "schema.CreateAccountInput": {
            "type": "object",
            "properties": {
                "cpf": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                }
            }
        },
        "schema.CreateAccountResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "integer"
                },
                "cpf": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "schema.ListAccountsResponse": {
            "type": "object",
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schema.Account"
                    }
                }
            }
        },
        "schema.ListTransfersResponse": {
            "type": "object",
            "properties": {
                "transfers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schema.Transfer"
                    }
                }
            }
        },
        "schema.LoginInput": {
            "type": "object",
            "properties": {
                "cpf": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                }
            }
        },
        "schema.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "schema.PerformTransferInput": {
            "type": "object",
            "properties": {
                "account_destination_id": {
                    "type": "string"
                },
                "amount": {
                    "type": "integer"
                }
            }
        },
        "schema.PerformTransferResponse": {
            "type": "object",
            "properties": {
                "account_destination_id": {
                    "type": "string"
                },
                "account_origin_id": {
                    "type": "string"
                },
                "amount": {
                    "type": "integer"
                }
            }
        },
        "schema.Transfer": {
            "type": "object",
            "properties": {
                "account_destination_id": {
                    "type": "string"
                },
                "account_origin_id": {
                    "type": "string"
                },
                "amount": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                }
            }
        }
    }
}